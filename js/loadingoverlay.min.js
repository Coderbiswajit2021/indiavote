! function(e, a) {
    function i(i, n) {
        i = e(i);
        var o = i.is("body"),
            r = i.data("LoadingOverlayCount");
        if (r === a && (r = 0), 0 == r) {
            var d = e("<div>", {
                "class": "loadingoverlay",
                css: {
                    "background-color": n.color,
                    display: "flex",
                    "flex-direction": "column",
                    "align-items": "center",
                    "justify-content": "center"
                }
            });
            if (n.zIndex !== a && d.css("z-index", n.zIndex), n.image && d.css({
                    "background-image": "url(" + n.image + ")",
                    "background-position": n.imagePosition,
                    "background-repeat": "no-repeat"
                }), n.fontawesome && e("<div>", {
                    "class": "loadingoverlay_fontawesome " + n.fontawesome
                }).appendTo(d), n.custom && e(n.custom).appendTo(d), o ? d.css({
                    position: "fixed",
                    top: 0,
                    left: 0,
                    width: "100%",
                    height: "100%"
                }) : d.css("position", "fixed" == i.css("position") ? "fixed" : "absolute"), t(i, d, n, o), n.resizeInterval > 0) {
                var s = setInterval(function() {
                    t(i, d, n, o)
                }, n.resizeInterval);
                i.data("LoadingOverlayResizeIntervalId", s)
            }
            n.fade ? n.fade === !0 ? n.fade = [400, 200] : ("string" == typeof n.fade || "number" == typeof n.fade) && (n.fade = [n.fade, n.fade]) : n.fade = [0, 0], i.data({
                LoadingOverlay: d,
                LoadingOverlayFadeOutDuration: n.fade[1]
            }), d.hide().appendTo("body").fadeIn(n.fade[0])
        }
        r++, i.data("LoadingOverlayCount", r)
    }

    function n(i, n) {
        i = e(i);
        var t = i.data("LoadingOverlayCount");
        if (t !== a)
            if (t--, n || 0 >= t) {
                var o = i.data("LoadingOverlayResizeIntervalId");
                o && clearInterval(o), i.data("LoadingOverlay").fadeOut(i.data("LoadingOverlayFadeOutDuration"), function() {
                    e(this).remove()
                }), i.removeData(["LoadingOverlay", "LoadingOverlayCount", "LoadingOverlayFadeOutDuration", "LoadingOverlayResizeIntervalId"])
            } else i.data("LoadingOverlayCount", t)
    }

    function t(a, i, n, t) {
        if (!t) {
            var o = "fixed" == a.css("position") ? a.position() : a.offset();
            i.css({
                top: o.top + parseInt(a.css("border-top-width"), 10),
                left: o.left + parseInt(a.css("border-left-width"), 10),
                width: a.innerWidth(),
                height: a.innerHeight()
            })
        }
        var r = t ? e(window) : a,
            d = "auto";
        n.size && "auto" != n.size && (d = Math.min(r.innerWidth(), r.innerHeight()) * parseFloat(n.size) / 100, n.maxSize && d > parseInt(n.maxSize, 10) && (d = parseInt(n.maxSize, 10) + "px"), n.minSize && d < parseInt(n.minSize, 10) && (d = parseInt(n.minSize, 10) + "px")), i.css("background-size", d), i.children(".loadingoverlay_fontawesome").css("font-size", d)
    }
    var o = {
        color: "rgba(255, 255, 255, 0.8)",
        custom: "",
        fade: !0,
       // fontawesome: "fa fa-spinner fa-spin fa-1x colorwhite",
        image: "../images/giphy-d.gif",
        imagePosition: "center center",
      //  size:50,
        maxSize: "180px",
        minSize: "180px",
        resizeInterval: 0,
        size: "80%",
        zIndex: a,
        imageAutoResize:true,
    };
    e.LoadingOverlaySetup = function(a) {
        e.extend(!0, o, a)
    }, e.LoadingOverlay = function(a, t) {
        switch (a.toLowerCase()) {
            case "show":
                var r = e.extend(!0, {}, o, t);
                i("body", r);
                break;
            case "hide":
                n("body", t)
        }
    }, e.fn.LoadingOverlay = function(a, t) {
        switch (a.toLowerCase()) {
            case "show":
                var r = e.extend(!0, {}, o, t);
                return this.each(function() {
                    i(this, r)
                });
            case "hide":
                return this.each(function() {
                    n(this, t)
                })
        }
    }
}(jQuery);
